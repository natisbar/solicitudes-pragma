server:
  port: 8081
spring:
  application:
    name: "Solicitudes"
  devtools:
    add-properties: false
  webflux:
    base-path: "/api"
  h2:
    console:
      enabled: true
      path: "/h2"
  profiles:
    include: null
adapters:
  r2dbc:
    host: "localhost"
    port: 5432
    database: "pragma"
    schema: "solicitudes"
    username: "postgres"
    password: 1234
security:
  jwt:
    secretkey: "Bardelhaus1234567890Bardelhaus1234567890$"
management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
cors:
  allowed-origins: "http://localhost:4200,http://localhost:8080"
adapter:
  restconsumer:
    timeout: 5000
    url: "http://localhost:8080/api"
    path: "v1/usuarios/por-correos"
    path-login: "v1/login"
    username: "jandreaj100@gmail.com"
    password: "Bardelhaus1$"
  sqs:
    validacion:
      region: "us-east-2"
      queueUrl: "https://sqs.us-east-2.amazonaws.com/096212910572/Solicitudes.fifo"
      endpoint: "https://sqs.us-east-2.amazonaws.com"
    respuesta:
      region: "us-east-2"
      queueUrl: "https://sqs.us-east-2.amazonaws.com/096212910572/Respuesta.fifo"
      endpoint: "https://sqs.us-east-2.amazonaws.com"
resilience4j:
  circuitbreaker:
    instances:
      testGet:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
      testPost:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
